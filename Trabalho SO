import threading
import csv
import time
import matplotlib.pyplot as plt

# Classe que representa um processo
class Processo:
  
    def __init__(self, identificacao, chegada, cpu, prioridade):
        self.identificacao = identificacao
        self.chegada = chegada
        self.cpu = cpu
        self.prioridade = prioridade
        self.tempo_espera = 0

    def __str__(self):
        return f"Processo {self.identificacao} (Chegada: {self.chegada}, CPU: {self.cpu}, Prioridade: {self.prioridade})"

# Função para ler os processos de um arquivo CSV
def ler_processos(arquivo):
    processos = []
    arquivo = ('/content/drive/My Drive/UFSC/SistemasOperacionais/Trabalho_1/sjf.csv')
    with open(arquivo, "r") as file:
        reader = csv.reader(file)
        for coluna in reader:

            identificacao = (coluna[0])
            chegada = int(coluna[1])
            cpu = int(coluna[2])
            prioridade = int(coluna[3])

            processo = Processo(identificacao, chegada, cpu, prioridade)
            processos.append(processo)
    return processos

# Função que simula o escalonamento FCFS
def fcfs(processos):

    tempo_espera_total = 0
    tempo_atual = 0
    
    '''
    O primeiro a chegar primeiro a ser servido é o tipo mais simples de algoritmo. 
    É um algoritmo não preemptivo, ou seja, o processo não pode ser interrompido depois de iniciar a execução.
    FIFO
    '''

    for processo in processos:
        if tempo_atual < processo.chegada:  # Tempo atual < tempo de chegada
            tempo_atual = processo.chegada  

        tempo_espera = tempo_atual - processo.chegada
        tempo_espera_total += tempo_espera
        tempo_atual += processo.cpu

    media_espera_fcfs = tempo_espera_total / len(processos)
    print(f"Média de espera FCFS: {media_espera_fcfs}\n")
    return media_espera_fcfs
    

# Função que simula o escalonamento SJF
def sjf(processos):

    tempo_espera_total = 0
    processos_restantes = processos.copy()
    tempo_atual = 0

    '''
    Menor tarefa primeiro consiste em atribuir o processador à menor (mais curta) tarefa da fila de tarefas prontas.
    '''

    while processos_restantes:
        processo_mais_curto = min(processos_restantes, key=lambda x: x.cpu)
        processos_restantes.remove(processo_mais_curto)

        if tempo_atual < processo_mais_curto.chegada:
            tempo_atual = processo_mais_curto.chegada

        tempo_espera = tempo_atual - processo_mais_curto.chegada
        tempo_espera_total += tempo_espera
        tempo_atual += processo_mais_curto.cpu

    media_espera_sjf = tempo_espera_total / len(processos)
    print(f"Média de espera SJF: {media_espera_sjf}\n")
    return media_espera_sjf
    

# Função que simula o escalonamento por Prioridades
def prioridades(processos):
    
    tempo_espera_total = 0
    processos.sort(key=lambda x: x.prioridade)    #Ordem crescente
    tempo_atual = 0

    '''
    Os processos com maiores prioridades são executados primeiro
    '''
    for processo in processos:
        if tempo_atual < processo.chegada:    # prioridade Menor Maior quanto menor o numero maior a prioridade
            tempo_atual = processo.chegada
            
        tempo_espera = tempo_atual - processo.chegada
        tempo_espera_total += tempo_espera
        tempo_atual += processo.cpu
        
    media_espera_priori = tempo_espera_total / len(processos)
    print(f"Média de espera Prioridades: {media_espera_priori}\n"
    "--------------------------------------------------------------------------")
    return media_espera_priori

  
# Função para iniciar as threads para cada algoritmo
def iniciar_threads(processos):
    thread_fcfs = threading.Thread(target=fcfs, args=(processos,))
    thread_sjf = threading.Thread(target=sjf, args=(processos,))
    thread_prioridades = threading.Thread(target=prioridades, args=(processos,))

    thread_fcfs.start()
    thread_sjf.start()
    thread_prioridades.start()

    thread_fcfs.join()
    thread_sjf.join()
    thread_prioridades.join()

# Função para gerar o gráfico comparativo
def gerar_grafico(processos, medias):
    algoritmos = ['FCFS', 'SJF', 'Prioridades']

    c = ['orange','green','red']
    plt.bar(algoritmos, medias, color = c)
    
    plt.xlabel('Algoritmo de Escalonamento')
    plt.ylabel('Tempo médio de espera')
    plt.title('Comparação das médias de espera')
    plt.show()

def main():
    arquivo_processos = ('/content/drive/My Drive/UFSC/SistemasOperacionais/Trabalho_1/sjf.csv')  # Arquivo CSV contendo os processos
    processos = ler_processos(arquivo_processos)
   
    if processos:
        iniciar_threads(processos)
        medias = [fcfs(processos), sjf(processos), prioridades(processos)]
        gerar_grafico(processos, medias)

main()



'''
Exemplo do SJF
0 -------  3+6 ------- 9+7 -------- 16+8 ------- 24

28/4 = 7m/s

Com o msm valor porem em FCFS
0 -------  6+8 ------- 14+7 ------- 21+3 -------- 24

41/4 = 10,25m/s

'''